{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","monster","searchField","fetch","then","response","json","users","setState","this","filter","name","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2UA+CeA,G,0EA1Cb,aAAc,IAAD,8BACX,gBACKC,MAAS,CACbC,QAAS,GACTC,YAAa,IAJH,E,gEAUO,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACP,QAASM,S,+BAIjE,IAAD,EACwBE,KAAKT,MAA7BC,EADA,EACAA,QAASC,EADT,EACSA,YAESD,EAAQS,QAAO,SAAAT,GAAO,OAAIA,EAAQU,KAAKC,cAAcC,SAASX,EAAYU,sB,GApBrFE,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ba6c60f5.chunk.js","sourcesContent":["import React, {Component} from 'react';   //component is prop. on react.\nimport './App.css';\nimport {CardList} from \"./components/card-list/card-list.component\"\nimport {SearchBox} from \"./components/search-box/search-box.component\"\nclass App extends Component{  //used class,enabes use of state, a js object with props, we can access anytime in app\n  constructor(){\n    super();             //super calls the constructor method of component class and give us access to this.state\n    this.state =  {      //this. state is a component obj \n     monster: [] ,\n     searchField: \"\"\n    }\n    \n  }\n  //we want our initial state to be an empty array\n\n  componentDidMount(){        //this life cycle method calls the block code when our component gets rendered on thr page.\n    fetch(\"https://jsonplaceholder.typicode.com/users\")  //this native method will return a promise\n    .then(response => response.json()).then(users => this.setState({monster: users})) //setState is also method in Component which can change the content of the state\n       \n  } ///taking the response and converting it into the json format so our js can understand \n  //as soon as our state changes,via setState , the reneer method get callled again.\n  render (){\n    const {monster, searchField} = this.state  //object destructuring, this equals to const monsters = this.state.monster\n    //includes method checks if the value we pass in it exists in the method before that or not\n    const filteredMonsters = monster.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    return (   //we use key in react, bcz react will know which element or object has changed so it only needs to re render that.\n      //since setState is a asyn method, we pass the second arguement to it to push it to run right after first\n      //onChange is the synthesis method that call the fx inside every time we change our input, which then setState, if our setState run it re render the App component\n      //we want our setState in app.js for searchbox bcz our other components need access to searchfield and need to sync, one way data flow\n      //if we put setState in searchbox, our searchfiled will be inaccessible, this is called lifting state up\n    <div className=\"App\"> \n    <h1>Monster Rolodex</h1>\n    <SearchBox \n      placeholder = \"search monsters\"\n      handleChange = {e => this.setState({searchField: e.target.value})}\n    />\n    \n    <CardList monsters = {filteredMonsters}  /> \n    {console.log(filteredMonsters)}\n    \n    </div>\n    \n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}